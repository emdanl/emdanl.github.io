[
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "Python_basics.html",
    "href": "Python_basics.html",
    "title": "Lecture 4",
    "section": "",
    "text": "---\ntitle: Python Basics\nauthor: Erin Mansfield\ndate: 2025-2-17\ncategories: [python, basics, programming]\nimage: \"image.png\"\ntoc: true\n---\n\n\n# Python Basics\nA value is literal such as a number or text\nThere are different types of values\n** 352.3 is known as a float or double\n** 22 is an integer\n** \"Hello World!\" is a string\n\nA variable is a name that refers to a value\nSometimes you will hear variables referred to as objects\n\n\n# Variable in data. frame\nDefintion: A data.frame is a table-like data structure used for storing data in a tabular format with rows and columns\nStructure: Consisits of\n** Variables\n** Observations\n** Values\n\n\n# Assignment (=)\nIn Python, we used = to assign a value to a variable\n\n\n# Assigment (=) Example\n# Here we assign the integer value 5 to the variable x.\nx = 5\n\n# Now we can use the variable x in the next line.\ny = x + 12\ny\n\n\n# Variables Are Names, Not Places\nThe most basic built-in data types that we'll need to know about are:\n** integers 10\n** floats 1.23\n** strings \"like this\"\n** booleans \"True\"\n** nothing None\n\n\n# Varibales Are Names, Not Places Example\nlist_example = [10, 1.23, \"like this\", True, None]\nprint(list_example)\ntype(list_example)\n\n\n# Operators\nAll of the basic operators we see in mathematics are available to use:\n** + for addition\n** - for subtraction\n** * for multiplication\n** for powers\n** / for division\n** // for integer division\n\n\n# Casting Variables\nWe need to explicity cast a value from one type to another\n** We can do this using built-in functions like str(), int(), and float()\n\n\n# Casting Variables Examples\norig_number = 4.39898498\ntype(orig_number)\n\nmod_number = int(orig_number)\nmod_number\ntype(mod_number)\n\n\n# Dictionaries\nAnother built-in Python type that is enormously useful is the dictionary\nWe can obtain keys, values, or key-value paris from dictionaries\n\n\n# Dictionaries Examples\ncities_to_temps = {\"Paris\": 28, \"London\": 22, \"New York\": 36, \"Seoul\": 29}\n\ncities_to_temps.keys()\ncities_to_temps.values()\ncities_to_temps.items()\n\n\nLecture 5\n\n# Booleans, Conditions, and if Statements\nBoolean data have either True or False value\nThe == is an operator that compares the objects on eitehr side and returns True if they have the same values\n\n\n# Booleans, Conditions, and if Statements Examples\n10 == 20\n10 == '10'\n\nboolean_condition1 = 10 == 20\nprint(boolean_condition1)\n\nboolean_condition2 = 10 == '10'\nprint(boolean_condition2)\n\nname = \"Geneseo\"\nscore = 99\n\nif name == \"Geneseo\" and score &gt; 90:\n    print(\"Geneseo, you achieved a high score.\")\n\nif name == \"Geneseo\" or score &gt; 90:\n    print(\"You could be called Geneseo or have a high score\")\n\nif name != \"Geneseo\" and score &gt; 90:\n    print(\"You are not called Geneseo and you have a high score\")\n\n    name_list = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n\nprint(\"Lovelace\" in name_list)\n\nprint(\"Bob\" in name_list)\n\n\n# Slicing Methods\nWith slicing methods, we can get subset of the data object\n\n\n# Slicing Methods Strings\nFrom strings, we can access the individual characters via slicing and indexing\n\n\n# Slicing Methods Strings Examples\nstring = \"cheesecake\"\nprint( string[-4:] )\nstring = \"cheesecake\"\nprint(\"String has length:\")\nprint( len(string) )\nlist_of_numbers = range(1, 20)\nprint(\"List of numbers has length:\")\nprint( len(list_of_numbers) )\n\n\n# Slicing Methods Lists\nlist_example = ['one', 'two', 'three']\nlist_example[ 0 : 1 ]\nlist_example[ 1 : 3 ]\n\n\n# Functions, Arguments, Parameters\nA function can take any number and type of input parameters and return any number and type of output results\nint(\"20\")\nfloat(\"14.3\")\nstr(5)\nint(\"xyz\")\n\nMuch as a cooking receipe can accept ingredients, a function invocation can accpet inputs called arguments\nA parameter is a name given to an expected function argument\n\n\n# Loop with while and for\nRepeat with while\ncount = 1\nwhile count &lt;= 5:\n  print(count)\n  count += 1\nAsking the user for input\nstuff = input()\nType something and press retun\nprint(stuff)\nCancel with break\nwhile True:\n    value = input(\"Integer, please [q to quit]: \")\n    if value == 'q': # quit\n        break\n    number = int(value)\n    if number % 2 == 0: # an even number\n        continue\n    print(number, \"squared is\", number*number)\n\nRepeat with while\nnumbers = [1, 3, 5]\nposition = 0\n\nwhile position &lt; len(numbers):\n    number = numbers[position]\n    if number &gt; 4:  # Condition changed to checking if the number is greater than 4\n        print('Found a number greater than 4:', number)\n        break\n    position += 1\nelse:  # break not called\n    print('No number greater than 4 found')\n\n\n# list and dictionary comprehensions\nList comprehension is a concise way to modify lists\nDictionary comprehension is a concise way to create or modify dictionaries\n\n\n# Modifying Lists and Dictionaries\nappend(): adds an item to the end of the list\nremove(): deletes the first occurrence of value in the list\nlist comprehnesion: Removes items based on a condition\ndel statement: deletes an item by index or a slice of items\nupdate(): adds new key value pairs or updates existing ones\ndictionary comprehension: removes items based on a condition\ndel statement: deletes an item by key\n\n\n\n\n# Handle Errors with try and except\nPython uses exceptions: code that is executed when an associated error occurs\nErrors\nshort_list = [1, 2, 3]\nposition = 5\nshort_list[position]\nHandle errors with try and except\nshort_list = [1, 2, 3]\nposition = 5\n\ntry:\n    short_list[position]\nexcept:\n    print('Need a position between 0 and', len(short_list)-1, ' but got',\n    position)\n\n\n# Importing and Installing Modules, Packages, and Libraries\nCore libraries that enable Python to store adn analyze data efficiently are: pandas, numpy, matplotlib and seaborn\nimport statement\nas or from\n\n\n\nClasswork 4\n\n# Question 1\nval = 2**5 / (7 * (4 -2**3))\nval\n\n\n# Question 2: For each expression what is the value of the expression?\n\nboolean_condition1(20 == '20')\nprint(boolean_condition1)\n#false\n\nx= 4.0\ny= .5\nx &lt; y or 3*y &lt; x\nprint (x&lt;y)\n#false\nprint(3*y&lt;x)\n#false\n\n\n# Question 3: Write a code that uses slicing and the print function to print out the following message: the total trip cost is 12:80\nfare = \"$10.00\"\ntip = \"2.00$\"\ntax = \"$ 0.80\"\n\nfare = float(fare[1:])\ntip = float(tip[-1])\ntax = float(tax[2:])\ntotal= fare + tip + tax\nprint(f\"the total trip cost is: ${total}\")\n\n\n# Question 4: Write a code that uses print and max function ot print out the largest value in the list, and print the largest value in the list is: 1000\nlist_variable = [100, 144, 169, 1000, 8]\nprint(f\"The largest value in the list is: {max(list_variable)}\")\n\n\n# Question 5: Use a whole loop to print a list and for loop to print the list [3, 2, 1, 0] one at a time\nvals = [3, 2, 1, 0]\nindex=0\nwhile index &lt; len(vals):\n  print(vals[index])\n  index += 1\nfor n in vals:\n  print(n)\n\n\n# Question 6:\n#While loop\nguess_me = 7\nnumber = 1\n\nwhile number &lt; guess_me:\n  print(\"too low!\")\n  number += 1\nwhile number == guess_me:\n  print(\"found it\")\n  number += 1\nwhile number &gt; guess me:\n  print(\"oops!\")\n  break\n\n# For loop\nguess_me = 7\nnumber = 1\n\nfor k in range(1,10):\n  if number &lt; guess me:\n    print(\"too low\")\n  elif number == guess me:\n    print(\"found it\")\n  else:\n    print(\"oops\")\n    break\n\n  number += 1\n\n\n# Question 7:\nvalue = \"320\"\nprint(type(value))\n\nmod_number = float(value)\nprint(type(mod_number))\n\nif type(mod_number) == float:\n  print(f\"You entered: {value}\")\nelse:\n  print(\"that's not a valid number\")\n#&lt;class 'str'&gt;\n#class 'float'&gt;\n#You entered: 320\n\n\n# Question 8:\nimport pandas as pd\n%pip install itables\nfrom itables import init_notebook_mode, show"
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/movies/movies.html",
    "href": "posts/movies/movies.html",
    "title": "Holiday Movies",
    "section": "",
    "text": "## Import DataFrames\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n\n\n## Merging\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n\nmovies_with_genres = pd.merge(holiday_movies, holiday_movie_genres, on = 'tconst')\n\n\n## Count\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n\ngenre_counts = movies_with_genres['genres'].value_counts()\n\n\n# Filter\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n\nchristmas_movies = movies_with_genres[movies_with_genres['simple_title'].str.contains('christmas', case=False, na=False)]\n\n\n# Indexing\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n\nchristmas_movies_sorted_indexed = christmas_movies_sorted.set_index('primary_title')\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-4-0d9a0d6c0ed8&gt; in &lt;cell line: 0&gt;()\n      6 holiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n      7 \n----&gt; 8 christmas_movies_sorted_indexed = christmas_movies_sorted.set_index('primary_title')\n\nNameError: name 'christmas_movies_sorted' is not defined\n\n\n\n\n## Sorting\n\nimport pandas as pd\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\n\nchristmas_movies_sorted = christmas_movies.sort_values(by='year', ascending=False)"
  },
  {
    "objectID": "posts/project/danl_210_Mansfield_Erin_stock_ESG.html",
    "href": "posts/project/danl_210_Mansfield_Erin_stock_ESG.html",
    "title": "Data Analysis",
    "section": "",
    "text": "Unifying ESG Metrics with Financial Analysis\nBackround\n\n#The sections of Environmental, Social and Governence, also known as ESG data is used more and more by investors to estimate corporate responsibility and risk of investment.\n#Our project uses Yahoo finance to find ESG score for Apple and evaluate their long term financial risk.\n\nStatement of Problem\n\n#Does the ESGs performance have a measureable relationship with financial performance, or more specifically, how do these changes relate\n#to profitability and/or customer engagement?\n\n\nData Collection\nPart 1\n\n# Import Setup\n# Import Libraries\n## Here is an example of the libraries and setup\n\n### import time\n### import random\n### import pandas as pd\n### from selenium import webdriver\n### from selenium.webdriver.common.by import By\n### from selenium.webdriver.chrome.options import Options\n### from selenium.webdriver.support.ui import WebDriverWait\n### from selenium.webdriver.support import expected_conditions as EC\n### import os\n\nPart 2\n\n# Working Directory\n## A workign directory is where the Python code will look for files or save files\n### wd_path = Your working directory\n### os.chdir(wd_path)\n\nPart 3\n\n# Webdriver\n## options = Options()\n## options.add_argument()\n## options.add_argument()\n## options.page_load_strategy()\n## driver = webdriver.Chrome(options=options)\n\n\nPart 4*\n\n\n# load both datasets\n\n## df_2024 = pd.read_csv(\"link\")\n## df_2025 = pd.read_csv(\"link\")\n\nPart 5\n\n# esg_data = []\n# for symbol in list()\n  #url\n  #driver.get()\n\n  #time.sleep(random.uniform(5,10))\n\n  #try:\n\n    #WebDriverWait().until(\n        #EC.presence_of_element_located(())\n\n\n  #esg_data.append()\n  # expect Exception as e\n    #print()\n    #continue\n\n  #Convert to Data Frame\n    ## df_esg = pd.DataFrame(esg_data)\n    ## df_esg.to_csv(\"esg_scraped_data.csv, index= False\")\n\nPart 6\n\n# Scrape Historical Stock Prices\n\n## Use linkes like the Yahoo finance links\n\n### https://finance.yahoo.com/quote/MSFT/history?p=MSFT&period1=1704067200&period2=1743446400\n\nDescriptive Statstics\n\n# We started by generating the descriptive statistics for both ESG and the financial data. This meant finding mean, median, spread and deviation as well as range and\n#the distribution shape. The summary revealed that revenue and profit have consistent growth over this period, but profit had a bit higher variance. Number of employees\n#had a downward trend, which could show potential operational efficiency improvement areas. ESG scores were more stable but showed some improvement in Governance. We ended\n#up using a correlation heat map to better understand these relationships between the variables. We interpreted that profit had a positive correlation and strong alignment.\n#Number of employees showed strong negative correlation with profit and revenue which showed leaner staffing may mean higher financial performance. Customer count was positively\n#correlated with revenue as well.\n\nExploratory Data Analysis\n\n#Some of the key questions we explored was the trend in ESG from 2024 to 2025, whether or not the ESG risk correlates with higher profitability, and which of the individual ESG scores were most predictive. We found that ESG scores generally declined, which showed improvement and that lower social and governance scores were associated with increased returns.\n\nSignificance of the Project\n\n# The significance of this project is to take a look into how ESG aspects which include Environmental, Social, and Governance, can be used with financial analysis to take a look into companies. The combination of the ESG aspects and financial analysis can provide insight on the companies performance, and their societal impact.\n# When looking at ESG elements, investors can make better decisions on which companies to invest in. The companies that are better to invest in often have higher ESG scores.\n# Companies can also use their ESG elements with fiancnial aspects to compare their performance aganist their compeition. They can make sure they are inline with investor expections, their social responsiblity to the enviornment and people\n\nReferences\n\n# https://www.thecorporategovernanceinstitute.com/insights/guides/simple-guide-esg/#:~:text=What%20is%20the%20ESG%20of,company's%20sustainability%20and%20ethical%20impact.\n# https://www.google.com/aclk?sa=L&ai=DChcSEwiT-6bavamNAxWEX0cBHXKxBWwYABAAGgJxdQ&co=1&gclid=Cj0KCQjwxJvBBhDuARIsAGUgNfgSAIhSk5ul9GdYV2_tlUo5Hq27ehXsLJ3ULWZrR6X3d0tVCDQgmo4aAh5fEALw_wcB&cce=1&sig=AOD64_3XMThYbPo7ZtODrvC1DSHxKMVOqg&q&adurl&ved=2ahUKEwjY6aDavamNAxX0EFkFHcZYFIkQ0Qx6BAgLEAE\n# https://chatgpt.com/?utm_source=google&utm_medium=paidsearch_brand&utm_campaign=DEPT_SEM_Google_Brand_Acquisition_NAMER_US_Consumer_CPA_BAU_Mix&utm_term=chatgpt&gad_source=1&gad_campaignid=21714513245&gbraid=0AAAAA-IW-UURj3fe5nhr9GoeDoWZRUv3L&gclid=Cj0KCQjwxJvBBhDuARIsAGUgNfjw-XLZHmyi9x8UrRRyQgB3wmWjUPEuzPVraRzO5gitVer6YDXtb_waAiUnEALw_wcB"
  },
  {
    "objectID": "posts/Spotify/spotify.html",
    "href": "posts/Spotify/spotify.html",
    "title": "Spotify",
    "section": "",
    "text": "Music\n\n# Upload the CSV File\n\nimport pandas as pd\n\nspotify = pd.read_csv(\"https://bcdanl.github.io/data/spotify_all.csv\")\nspotify.head()\n\n\n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Frequency\n\nartist_counts = spotify['artist_name'].value_counts()\nartist_counts.head(10)\n\n\n\n\n\n\n\n\ncount\n\n\nartist_name\n\n\n\n\n\nDrake\n2715\n\n\nKanye West\n1065\n\n\nKendrick Lamar\n1035\n\n\nRihanna\n915\n\n\nThe Weeknd\n913\n\n\nFuture\n784\n\n\nEminem\n760\n\n\nLil Uzi Vert\n728\n\n\nEd Sheeran\n719\n\n\nThe Chainsmokers\n642\n\n\n\n\ndtype: int64\n\n\n\n# Usher Filter\n\nusher_tracks = spotify[spotify['artist_name'] == 'Usher']\nusher_tracks[['playlist_name', 'track_name', 'pos']]\n\n\n    \n\n\n\n\n\n\nplaylist_name\ntrack_name\npos\n\n\n\n\n5\nThrowbacks\nYeah!\n5\n\n\n6\nThrowbacks\nMy Boo\n6\n\n\n305\nWedding\nOMG\n7\n\n\n308\nWedding\nYeah!\n10\n\n\n1047\nSARAH\nLove in This Club\n11\n\n\n...\n...\n...\n...\n\n\n195235\nParty\nYeah!\n52\n\n\n196439\npregame\nI Don't Mind\n17\n\n\n197124\nBaby Making Music\nNice & Slow\n21\n\n\n197514\nPARTAY\nYeah!\n44\n\n\n197986\nSex\nNice & Slow\n16\n\n\n\n\n405 rows × 3 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Sort Usher\n\nusher_sorted = usher_tracks.sort_values(by='pos')\nusher_sorted[['playlist_name', 'track_name', 'pos']]\n\n\n    \n\n\n\n\n\n\nplaylist_name\ntrack_name\npos\n\n\n\n\n160314\nRunning\nYeah!\n0\n\n\n74692\nR&B classics\nBad Girl\n0\n\n\n10265\nLove Music\nNice & Slow\n0\n\n\n160315\nRunning\nDJ Got Us Fallin' In Love\n1\n\n\n69491\n👑👑👑\nGood Kisser\n1\n\n\n...\n...\n...\n...\n\n\n90058\nSlow jams\nTrading Places\n164\n\n\n34363\nsmooth jams\nCaught Up\n175\n\n\n26110\nin my feels\nU Got It Bad\n176\n\n\n152668\n2016\nNo Limit\n191\n\n\n52584\nMain Playlist\nScream\n223\n\n\n\n\n405 rows × 3 columns"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Python-Basics/Python-basics.html",
    "href": "posts/Python-Basics/Python-basics.html",
    "title": "Python Basics",
    "section": "",
    "text": "# Lecture 4\n\n![An overview of Python basics](basics.png)\n\n```python\n# Python Basics\nA value is literal such as a number or text\nThere are different types of values\n** 352.3 is known as a float or double\n** 22 is an integer\n** \"Hello World!\" is a string\n\nA variable is a name that refers to a value\nSometimes you will hear variables referred to as objects\n\n# Variable in data. frame\nDefintion: A data.frame is a table-like data structure used for storing data in a tabular format with rows and columns\nStructure: Consisits of\n** Variables\n** Observations\n** Values\n# Assignment (=)\nIn Python, we used = to assign a value to a variable\n# Assigment (=) Example\n# Here we assign the integer value 5 to the variable x.\nx = 5\n\n# Now we can use the variable x in the next line.\ny = x + 12\ny\n# Variables Are Names, Not Places\nThe most basic built-in data types that we'll need to know about are:\n** integers 10\n** floats 1.23\n** strings \"like this\"\n** booleans \"True\"\n** nothing None\n# Varibales Are Names, Not Places Example\nlist_example = [10, 1.23, \"like this\", True, None]\nprint(list_example)\ntype(list_example)\n# Operators\nAll of the basic operators we see in mathematics are available to use:\n** + for addition\n** - for subtraction\n** * for multiplication\n** for powers\n** / for division\n** // for integer division\n# Casting Variables\nWe need to explicity cast a value from one type to another\n** We can do this using built-in functions like str(), int(), and float()\n# Casting Variables Examples\norig_number = 4.39898498\ntype(orig_number)\n\nmod_number = int(orig_number)\nmod_number\ntype(mod_number)\n# Dictionaries\nAnother built-in Python type that is enormously useful is the dictionary\nWe can obtain keys, values, or key-value paris from dictionaries\n# Dictionaries Examples\ncities_to_temps = {\"Paris\": 28, \"London\": 22, \"New York\": 36, \"Seoul\": 29}\n\ncities_to_temps.keys()\ncities_to_temps.values()\ncities_to_temps.items()\n\nLecture 5\n# Booleans, Conditions, and if Statements\nBoolean data have either True or False value\nThe == is an operator that compares the objects on eitehr side and returns True if they have the same values\n# Booleans, Conditions, and if Statements Examples\n10 == 20\n10 == '10'\n\nboolean_condition1 = 10 == 20\nprint(boolean_condition1)\n\nboolean_condition2 = 10 == '10'\nprint(boolean_condition2)\n\nname = \"Geneseo\"\nscore = 99\n\nif name == \"Geneseo\" and score &gt; 90:\n    print(\"Geneseo, you achieved a high score.\")\n\nif name == \"Geneseo\" or score &gt; 90:\n    print(\"You could be called Geneseo or have a high score\")\n\nif name != \"Geneseo\" and score &gt; 90:\n    print(\"You are not called Geneseo and you have a high score\")\n\n    name_list = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n\nprint(\"Lovelace\" in name_list)\n\nprint(\"Bob\" in name_list)\n# Slicing Methods\nWith slicing methods, we can get subset of the data object\n# Slicing Methods Strings\nFrom strings, we can access the individual characters via slicing and indexing\n# Slicing Methods Strings Examples\nstring = \"cheesecake\"\nprint( string[-4:] )\nstring = \"cheesecake\"\nprint(\"String has length:\")\nprint( len(string) )\nlist_of_numbers = range(1, 20)\nprint(\"List of numbers has length:\")\nprint( len(list_of_numbers) )\n# Slicing Methods Lists\nlist_example = ['one', 'two', 'three']\nlist_example[ 0 : 1 ]\nlist_example[ 1 : 3 ]\n# Functions, Arguments, Parameters\nA function can take any number and type of input parameters and return any number and type of output results\nint(\"20\")\nfloat(\"14.3\")\nstr(5)\nint(\"xyz\")\n\nMuch as a cooking receipe can accept ingredients, a function invocation can accpet inputs called arguments\nA parameter is a name given to an expected function argument\n# Loop with while and for\nRepeat with while\ncount = 1\nwhile count &lt;= 5:\n  print(count)\n  count += 1\nAsking the user for input\nstuff = input()\nType something and press retun\nprint(stuff)\nCancel with break\nwhile True:\n    value = input(\"Integer, please [q to quit]: \")\n    if value == 'q': # quit\n        break\n    number = int(value)\n    if number % 2 == 0: # an even number\n        continue\n    print(number, \"squared is\", number*number)\n\nRepeat with while\nnumbers = [1, 3, 5]\nposition = 0\n\nwhile position &lt; len(numbers):\n    number = numbers[position]\n    if number &gt; 4:  # Condition changed to checking if the number is greater than 4\n        print('Found a number greater than 4:', number)\n        break\n    position += 1\nelse:  # break not called\n    print('No number greater than 4 found')\n# list and dictionary comprehensions\nList comprehension is a concise way to modify lists\nDictionary comprehension is a concise way to create or modify dictionaries\n# Modifying Lists and Dictionaries\nappend(): adds an item to the end of the list\nremove(): deletes the first occurrence of value in the list\nlist comprehnesion: Removes items based on a condition\ndel statement: deletes an item by index or a slice of items\nupdate(): adds new key value pairs or updates existing ones\ndictionary comprehension: removes items based on a condition\ndel statement: deletes an item by key\n\n\n# Handle Errors with try and except\nPython uses exceptions: code that is executed when an associated error occurs\nErrors\nshort_list = [1, 2, 3]\nposition = 5\nshort_list[position]\nHandle errors with try and except\nshort_list = [1, 2, 3]\nposition = 5\n\ntry:\n    short_list[position]\nexcept:\n    print('Need a position between 0 and', len(short_list)-1, ' but got',\n    position)\n# Importing and Installing Modules, Packages, and Libraries\nCore libraries that enable Python to store adn analyze data efficiently are: pandas, numpy, matplotlib and seaborn\nimport statement\nas or from\n\n\nClasswork 4\n# Question 1\nval = 2**5 / (7 * (4 -2**3))\nval\n# Question 2: For each expression what is the value of the expression?\n\nboolean_condition1(20 == '20')\nprint(boolean_condition1)\n#false\n\nx= 4.0\ny= .5\nx &lt; y or 3*y &lt; x\nprint (x&lt;y)\n#false\nprint(3*y&lt;x)\n#false\n# Question 3: Write a code that uses slicing and the print function to print out the following message: the total trip cost is 12:80\nfare = \"$10.00\"\ntip = \"2.00$\"\ntax = \"$ 0.80\"\n\nfare = float(fare[1:])\ntip = float(tip[-1])\ntax = float(tax[2:])\ntotal= fare + tip + tax\nprint(f\"the total trip cost is: ${total}\")\n# Question 4: Write a code that uses print and max function ot print out the largest value in the list, and print the largest value in the list is: 1000\nlist_variable = [100, 144, 169, 1000, 8]\nprint(f\"The largest value in the list is: {max(list_variable)}\")\n# Question 5: Use a whole loop to print a list and for loop to print the list [3, 2, 1, 0] one at a time\nvals = [3, 2, 1, 0]\nindex=0\nwhile index &lt; len(vals):\n  print(vals[index])\n  index += 1\nfor n in vals:\n  print(n)\n# Question 6:\n#While loop\nguess_me = 7\nnumber = 1\n\nwhile number &lt; guess_me:\n  print(\"too low!\")\n  number += 1\nwhile number == guess_me:\n  print(\"found it\")\n  number += 1\nwhile number &gt; guess me:\n  print(\"oops!\")\n  break\n\n# For loop\nguess_me = 7\nnumber = 1\n\nfor k in range(1,10):\n  if number &lt; guess me:\n    print(\"too low\")\n  elif number == guess me:\n    print(\"found it\")\n  else:\n    print(\"oops\")\n    break\n\n  number += 1\n# Question 7:\nvalue = \"320\"\nprint(type(value))\n\nmod_number = float(value)\nprint(type(mod_number))\n\nif type(mod_number) == float:\n  print(f\"You entered: {value}\")\nelse:\n  print(\"that's not a valid number\")\n#&lt;class 'str'&gt;\n#class 'float'&gt;\n#You entered: 320\n# Question 8:\nimport pandas as pd\n%pip install itables\nfrom itables import init_notebook_mode, show"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "danl-210-python-basic.html",
    "href": "danl-210-python-basic.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "danl-210-python-basic.html#what-is-python",
    "href": "danl-210-python-basic.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "danl-210-python-basic.html#variables-and-data-types",
    "href": "danl-210-python-basic.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "danl-210-python-basic.html#control-structures",
    "href": "danl-210-python-basic.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "danl-210-python-basic.html#functions",
    "href": "danl-210-python-basic.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "danl-210-python-basic.html#lists-and-dictionaries",
    "href": "danl-210-python-basic.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Erin Mansfield",
    "section": "",
    "text": "Erin Mansfield majors in Finance and minors in Data Analytics and Accounting at SUNY Geneseo. When not working on school work, Erin loves to read and be with friends. She also plays on the tournament team for the Woman’s Volleyball Club here at Geneseo."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Erin Mansfield",
    "section": "Education",
    "text": "Education\nBemus Point Central School District | Bemus Point, NY  High School | September 2019- June 2023\nState University of New York at Geneseo | Geneseo, NY  B.S. in Finance | Aug 2022 - current  Minor in Data Analytics and Accounting"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Erin Mansfield",
    "section": "Experience",
    "text": "Experience\nChautauqua Institution | Barista | May 2019 - August 2023\nBrickwalk | Manager | May 2024 - August 2024\nComputer Information Technology | CIT HelpDesk | August 2024 - current"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\nHoliday Movies\n\n\n\n\n\nApr 9, 2025\n\n\nErin Mansfield\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\nSpotify\n\n\n\n\n\nMar 10, 2025\n\n\nErin Mansfield\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\nFeb 17, 2025\n\n\nErin Mansfield\n\n6 min\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n1 min\n\n\n\n\nNo matching items"
  }
]